[build-system]
requires = [
  "setuptools>=67.8",
  "wheel",
]

[tool.black]
line-length = 120
target-versions = ["py38"]
preview = true

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.per-file-ignores]
"pillow_heif/__init__.py" = ["F401"]

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
]
addopts = "-rs --color=yes"

[tool.coverage.run]
cover_pylib = true
include = ["*/pillow_heif/*"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "DeprecationWarning",
    "DEPRECATED"
]

[tool.mypy]
ignore_missing_imports = true
warn_no_return = true
strict_optional = true

[tool.pylint]
master.py-version = "3.8"
master.extension-pkg-allow-list = ["_pillow_heif"]
design.max-attributes = 9
design.max-branches = 16
design.max-locals = 18
design.max-returns = 8
similarities.min-similarity-lines = 6
basic.good-names = [
    "a", "b", "c", "d", "e", "f", "i", "j", "k", "v",
    "ex", "_", "fp", "im", "HeifImagePlugin", "AvifImagePlugin",
]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "missing-class-docstring",
    "missing-function-docstring",
    "line-too-long",
]

[tool.cibuildwheel]
build-verbosity = "2"
build = ["cp38-* cp39-* cp310-* cp311-* cp312-* pp39-* pp310-*"]
skip = ["cp36-* cp37-* pp37-* pp38-*"]
test-extras = "tests-min"
test-command = "pytest {project}"
before-test = [
    "pip install --prefer-binary pillow",
    "pip install --only-binary=:all: numpy || true",
    "pip install pympler || true",
]

[tool.cibuildwheel.macos]
before-all = [
    "brew install libjpeg little-cms2",
    "brew uninstall --force --ignore-dependencies libheif aom",
    "brew install --formula {project}/libheif/macos/libheif.rb",
    "HOMEBREW_PREFIX=$(brew --prefix)",
    "REPAIR_LIBRARY_PATH=$HOMEBREW_PREFIX/lib",
]
repair-wheel-command = [
  "DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-listdeps {wheel}",
  "DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel -v --require-archs {delocate_archs} -w {dest_dir} {wheel}",
]
test-skip = "cp38-macosx_arm64"

[tool.cibuildwheel.windows]
before-build = [
    "pip install delvewheel",
]
