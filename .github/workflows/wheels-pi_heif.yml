name: Wheels • Pi-Heif
# This action build `pi-heif` which is `pillow-heif` but without `aom` and `x265` libraries.

on:
  workflow_call:

jobs:
  wheels_macos_arm:
    name: macosx • aarch64
    runs-on: ubuntu-20.04

    steps:
    - name: Waiting for Cirrus CI
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.ref }}
        check-name: 'macosx • aarch64 • Pi-Heif • Cirrus'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 60
        allowed-conclusions: success

    - name: Download artifacts
      run: |
        curl -L https://api.cirrus-ci.com/v1/artifact/github/${{ github.repository }}/wheel_pi_heif_macos_arm/wheels.zip -o wheels.zip
        unzip wheels.zip

    - name: Upload built wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels_pi_heif
        path: wheelhouse/*.whl
        if-no-files-found: error

  wheels_windows:
    name: windows • x86_64
    runs-on: windows-2019
    env:
      MSYS2_PREFIX: "C:/temp/msys64/mingw64"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Transform to Pi-Heif
        run: |
          cp -r -v -force ./pi-heif/* .
          python3 .github/transform_to-pi_heif.py

      - uses: msys2/setup-msys2@v2
        with:
          location: C:/temp
          update: true
          install: >-
            patch
            mingw-w64-x86_64-binutils

      - name: Build libheif and dependencies
        shell: msys2 {0}
        run: |
            cd libheif/windows/mingw-w64-libheif
            makepkg-mingw --syncdeps --noconfirm -f
            pacman -U mingw-w64-x86_64-libheif-*-any.pkg.tar.zst --noconfirm

      - name: Remove DLL trailing data
        run: |
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libheif.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libde265-0.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libwinpthread-1.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libgcc_s_seh-1.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libstdc++-6.dll

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.19.2
          python3 -m cibuildwheel
        env:
          CIBW_ARCHS: "AMD64"
          CIBW_ENVIRONMENT_WINDOWS: PH_LIGHT_ACTION=1 TEST_DECODE_THREADS=0
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -vv -w {dest_dir} {wheel} --add-path ${{ env.MSYS2_PREFIX }}/bin"
          CIBW_PRERELEASE_PYTHONS: True

      - name: Checking built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels_pi_heif
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_macos:
    name: macosx • x86_64
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v4
      - name: Transform to Pi-Heif
        run: |
          cp -r -v ./pi-heif/* .
          python3 .github/transform_to-pi_heif.py

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.19.2
          python3 -m cibuildwheel
        env:
          CIBW_ARCHS: "x86_64"
          CIBW_ENVIRONMENT_MACOS: PH_LIGHT_ACTION=1 TEST_DECODE_THREADS=0
          MACOSX_DEPLOYMENT_TARGET: "12.0"
          CIBW_PRERELEASE_PYTHONS: True

      - name: Checking built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels_pi_heif
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_cpython:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux, musllinux ]
        cibw_arch: [ "aarch64", "x86_64" ]
    name: ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • CPython
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR: "/tmp/ph_build_stuff"
      KEY_HEAD: Pi-Heif-${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v4
      - name: Transform to Pi-Heif
        run: |
          cp -r -v ./pi-heif/* .
          python3 .github/transform_to-pi_heif.py

      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: musllinux preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: echo INSTALL_OS_PACKAGES="apk update && apk --no-cache add $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev"

      - uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ env.KEY_HEAD }}-${{ env.KEY_C_BUILD }}-${{ env.KEY_LINUX_LIBS }}
        env:
          KEY_LINUX_LIBS: ${{ hashFiles('libheif/linux/**') }}
          KEY_C_BUILD: ${{ hashFiles('libheif/linux_*.py') }}-${{ hashFiles('libheif/setup.py') }}

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.19.2
          python3 -m cibuildwheel
        env:
          CIBW_BUILD: ${{ format('cp3*-{0}_{1}', matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: |
            ${{ env.INSTALL_OS_PACKAGES }}
            python3 {package}/libheif/linux_build_libs.py
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR=/host${{ env.BUILD_DIR }} PH_LIGHT_ACTION=1
          CIBW_PRERELEASE_PYTHONS: True

      - name: Checking built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels_pi_heif
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR }}

  wheels_linux_pypy:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux ]
        cibw_arch: [ "aarch64", "x86_64" ]
    name: ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • PyPy
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR: "/tmp/ph_build_stuff"
      KEY_HEAD: Pi-Heif-${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v4
      - name: Transform to Pi-Heif
        run: |
          cp -r -v ./pi-heif/* .
          python3 .github/transform_to-pi_heif.py

      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ env.KEY_HEAD }}-${{ env.KEY_C_BUILD }}-${{ env.KEY_LINUX_LIBS }}
        env:
          KEY_LINUX_LIBS: ${{ hashFiles('libheif/linux/**') }}
          KEY_C_BUILD: ${{ hashFiles('libheif/linux_*.py') }}-${{ hashFiles('libheif/setup.py') }}

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.19.2
          python3 -m cibuildwheel
        env:
          CIBW_BUILD: ${{ format('pp3*-{0}_{1}', matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: |
            yum makecache && yum install -y libjpeg-turbo-devel lcms2-devel
            python3 {package}/libheif/linux_build_libs.py
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR=/host${{ env.BUILD_DIR }} PH_LIGHT_ACTION=1

      - name: Checking built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels_pi_heif
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR }}

  sdist:
    name: Source distribution
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v4
      - name: Transform to Pi-Heif
        run: |
          cp -r -v ./pi-heif/* .
          python3 .github/transform_to-pi_heif.py

      - name: Install libheif from formula
        run: |
          brew uninstall --force --ignore-dependencies imagemagick libheif x265 aom
          brew install --formula ./libheif/macos/libheif.rb

      - name: Install requirements
        run: python3 -m pip install twine wheel build

      - name: Build sdist
        run: |
          python3 -m pip install pytest pillow numpy pympler defusedxml
          python3 -m build --sdist --outdir wheelhouse

      - name: Install and check sdist
        run: |
          python3 -m pip install --user wheelhouse/*.tar.gz
          python3 -m twine check wheelhouse/*

      - name: LibHeif info
        run: python3 -c "import pi_heif; print(pi_heif.libheif_info())"

      - name: Test sdist
        run: |
          export PH_LIGHT_ACTION=1 TEST_DECODE_THREADS=0
          python3 -m pytest

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels_pi_heif
          path: wheelhouse/*.tar.gz
