name: Create Release
#Note: Wheels for the Apple M1 are assembled locally and manually uploaded.

on:
  workflow_dispatch:

jobs:
  wheel_armv7l:
    name: Wheels • Debian 11+ • ARMv7l • CPython3.8+
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build pillow_heif
        run: |
          mkdir dock_out
          docker buildx build --output type=local,dest=./dock_out --platform "linux/arm/v7" -f docker/armv7l_wheel.Dockerfile .
          ls -la ./dock_out/pillow_heif/repaired_dist

      - name: Checking built wheels
        run: |
          python3 -m pip install twine
          twine check ./dock_out/pillow_heif/repaired_dist/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./dock_out/pillow_heif/repaired_dist/*.whl
          if-no-files-found: error

  wheels_windows:
    name: Wheels • windows • x86_64
    runs-on: windows-2019
    env:
      MSYS2_PREFIX: "C:/temp/msys64/mingw64"

    steps:
      - uses: actions/checkout@v3

      - name: Python preparing
        run: python3 -m pip install cibuildwheel twine

      - uses: msys2/setup-msys2@v2
        with:
          location: C:/temp
          update: true
          install: >-
            patch
            mingw-w64-x86_64-binutils

      - name: Build libheif and dependencies
        shell: msys2 {0}
        run: |
            cd libheif/windows/mingw-w64-libheif
            makepkg-mingw --syncdeps --noconfirm -f
            pacman -U mingw-w64-x86_64-libheif-1.13.0-2-any.pkg.tar.zst --noconfirm

      - name: Remove DLL trailing data
        run: ${{ env.MSYS2_PREFIX }}/bin/strip -s ${{ env.MSYS2_PREFIX }}/bin/*.dll

      - name: Run cibuildwheel
        run: cibuildwheel
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-*"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -vv -w {dest_dir} {wheel} --add-path ${{ env.MSYS2_PREFIX }}/bin"
          CIBW_ENVIRONMENT_WINDOWS: PH_FULL_ACTION=1

      - name: Check built wheels
        run: twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_macos:
    name: Wheels • macosx • x86_64
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v3
      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel twine
          cibuildwheel
        env:
          CIBW_BUILD: "*-macosx_x86_64"
          CIBW_SKIP: "cp36-* pp39-*"
          CIBW_TEST_SKIP: "cp311-*"
          CIBW_ENVIRONMENT_MACOS: PH_FULL_ACTION=1

      - name: Check built wheels
        run: twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_cpython:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux, musllinux ]
        cibw_arch: [ "aarch64", "x86_64" ]
    name: Wheels • ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • CPython
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR_PREFIX: "/tmp/pillow_heif"
      KEY_HEAD: ${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Install cibuildwheel & twine
        run: python3 -m pip install cibuildwheel twine

      - name: manylinux preparations
        if: matrix.cibw_buildlinux == 'manylinux'
        run: echo INSTALL_OS_PACKAGES="yum makecache && yum install -y $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "git-all libjpeg-turbo-devel lcms2-devel libffi-devel"

      - name: musllinux preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: echo INSTALL_OS_PACKAGES="apk update && apk --no-cache add $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "sudo py3-pip python3-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev"

      - name: Only minimal testing on aarch64
        if: matrix.cibw_arch == 'aarch64'
        run: echo CIBW_TEST_EXTRAS="tests-min" >> $GITHUB_ENV

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-tools
          key: ${{ env.KEY_HEAD }}-${{ hashFiles('libheif/linux_build_tools.py') }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-stuff
          key: ${{ env.KEY_HEAD }}-${{ env.KEY_CFFI_BUILD }}-${{ env.KEY_LINUX_LIBS }}
        env:
          KEY_LINUX_LIBS: ${{ hashFiles('libheif/linux_*.py') }}-${{ hashFiles('libheif/linux/**') }}
          KEY_CFFI_BUILD: ${{ hashFiles('libheif/build.py') }}-${{ hashFiles('libheif/heif.h') }}

      - name: Run cibuildwheel
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ format('cp3*-{0}_{1}', matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: ${{ env.INSTALL_OS_PACKAGES }}
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR_PREFIX=/host${{ env.BUILD_DIR_PREFIX }} PH_FULL_ACTION=1

      - name: Checking built wheels
        run: twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR_PREFIX }}

  wheels_linux_cpython_32bit:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux, musllinux ]
        cibw_arch: [ "i686" ]
    name: Wheels • ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • CPython
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR_PREFIX: "/tmp/pillow_heif"
      KEY_HEAD: ${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Install cibuildwheel & twine
        run: python3 -m pip install cibuildwheel twine

      - name: manylinux preparations
        if: matrix.cibw_buildlinux == 'manylinux'
        run: echo INSTALL_OS_PACKAGES="yum makecache && yum install -y $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "git-all libjpeg-turbo-devel lcms2-devel libffi-devel"

      - name: musllinux preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: echo INSTALL_OS_PACKAGES="apk update && apk --no-cache add $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "sudo py3-pip python3-dev fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev"

      - name: Only minimal testing on aarch64
        if: matrix.cibw_arch == 'aarch64'
        run: echo CIBW_TEST_EXTRAS="tests-min" >> $GITHUB_ENV

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-tools
          key: ${{ env.KEY_HEAD }}-${{ hashFiles('libheif/linux_build_tools.py') }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-stuff
          key: ${{ env.KEY_HEAD }}-${{ env.KEY_CFFI_BUILD }}-${{ env.KEY_LINUX_LIBS }}
        env:
          KEY_LINUX_LIBS: ${{ hashFiles('libheif/linux_*.py') }}-${{ hashFiles('libheif/linux/**') }}
          KEY_CFFI_BUILD: ${{ hashFiles('libheif/build.py') }}-${{ hashFiles('libheif/heif.h') }}

      - name: Run cibuildwheel
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ format('cp3*-{0}_{1}', matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: ${{ env.INSTALL_OS_PACKAGES }}
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR_PREFIX=/host${{ env.BUILD_DIR_PREFIX }} PH_LIGHT_ACTION=1

      - name: Checking built wheels
        run: twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR_PREFIX }}

  wheels_linux_pypy:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux ]
        cibw_arch: [ "aarch64", "x86_64" ]
        cibw_build: [ "pp37", "pp38" ]
    name: Wheels • ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • ${{ matrix.cibw_build }}
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR_PREFIX: "/tmp/pillow_heif"
      KEY_HEAD: ${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Install cibuildwheel & twine
        run: python3 -m pip install cibuildwheel twine

      - name: Only minimal testing on aarch64
        if: matrix.cibw_arch == 'aarch64'
        run: echo CIBW_TEST_EXTRAS="tests-min" >> $GITHUB_ENV

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-tools
          key: ${{ env.KEY_HEAD }}-${{ hashFiles('libheif/linux_build_tools.py') }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-stuff
          key: ${{ env.KEY_HEAD }}-${{ env.KEY_CFFI_BUILD }}-${{ env.KEY_LINUX_LIBS }}
        env:
          KEY_LINUX_LIBS: ${{ hashFiles('libheif/linux_*.py') }}-${{ hashFiles('libheif/linux/**') }}
          KEY_CFFI_BUILD: ${{ hashFiles('libheif/build.py') }}-${{ hashFiles('libheif/heif.h') }}

      - name: Run cibuildwheel
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ format('{0}-{1}_{2}', matrix.cibw_build , matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: "yum makecache && yum install -y git-all libjpeg-turbo-devel lcms2-devel libffi-devel"
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR_PREFIX=/host${{ env.BUILD_DIR_PREFIX }} PH_FULL_ACTION=1

      - name: Checking built wheels
        run: twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR_PREFIX }}

  wheels_linux_pypy_32bit:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux ]
        cibw_arch: [ "i686" ]
        cibw_build: [ "pp37", "pp38" ]
    name: Wheels • ${{ matrix.cibw_buildlinux }} • ${{ matrix.cibw_arch }} • ${{ matrix.cibw_build }}
    runs-on: ubuntu-20.04
    env:
      BUILD_DIR_PREFIX: "/tmp/pillow_heif"
      KEY_HEAD: ${{ matrix.cibw_arch }}-${{ matrix.cibw_buildlinux }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: matrix.cibw_arch == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Install cibuildwheel & twine
        run: python3 -m pip install cibuildwheel twine

      - name: Only minimal testing on aarch64
        if: matrix.cibw_arch == 'aarch64'
        run: echo CIBW_TEST_EXTRAS="tests-min" >> $GITHUB_ENV

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-tools
          key: ${{ env.KEY_HEAD }}-${{ hashFiles('libheif/linux_build_tools.py') }}

      - uses: actions/cache@v3
        with:
          path: ${{ env.BUILD_DIR_PREFIX }}/build-stuff
          key: ${{ env.KEY_HEAD }}-${{ env.KEY_CFFI_BUILD }}-${{ env.KEY_LINUX_LIBS }}
        env:
          KEY_LINUX_LIBS: ${{ hashFiles('libheif/linux_*.py') }}-${{ hashFiles('libheif/linux/**') }}
          KEY_CFFI_BUILD: ${{ hashFiles('libheif/build.py') }}-${{ hashFiles('libheif/heif.h') }}

      - name: Run cibuildwheel
        run: cibuildwheel
        env:
          CIBW_BUILD: ${{ format('{0}-{1}_{2}', matrix.cibw_build , matrix.cibw_buildlinux, matrix.cibw_arch) }}
          CIBW_ARCHS: ${{ matrix.cibw_arch }}
          CIBW_BEFORE_ALL_LINUX: "yum makecache && yum install -y git-all libjpeg-turbo-devel lcms2-devel libffi-devel"
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR_PREFIX=/host${{ env.BUILD_DIR_PREFIX }} PH_LIGHT_ACTION=1

      - name: Checking built wheels
        run: twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.whl
          if-no-files-found: error

      - name: Fix cache permissions
        run: sudo chmod -R 777 ${{ env.BUILD_DIR_PREFIX }}

  sdist:
    name: Source distribution
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install requirements
        run: python3 -m pip install check-manifest twine wheel

      - name: Run check-manifest
        run: python3 -m check_manifest

      - name: Install brew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install x265 libjpeg libde265 libheif

      - name: Build sdist
        run: |
          python3 -m pip install pytest piexif pillow numpy pympler defusedxml
          python3 -m build --sdist --outdir wheelhouse

      - name: Install and check sdist
        run: |
          python3 -m pip install --user wheelhouse/*.tar.gz
          python3 -m twine check wheelhouse/*

      - name: LibHeif info
        run: python3 -c "import pillow_heif; print(pillow_heif.libheif_info())"

      - name: Test sdist
        run: |
          export PH_FULL_ACTION=1
          python3 -m pytest -rs

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*.tar.gz

  draft_release:
    needs: [sdist, wheels_linux_cpython, wheels_linux_pypy, wheels_macos, wheels_windows, wheel_armv7l, wheels_linux_pypy_32bit, wheels_linux_cpython_32bit]
    runs-on: ubuntu-20.04
    name: Build and create release

    steps:
      - uses: actions/checkout@v3
      - name: Get release info
        id: get_release_info
        run: |
          RELEASE_VERSION=$(sed -n "s/^__version__.*\"\(.*\)\"$/\\1/p" ./pillow_heif/_version.py)
          echo "::set-output name=version::v${RELEASE_VERSION}"
          echo "::set-output name=tag::v${RELEASE_VERSION}"
          CHANGELOG=$(grep -oPz "(?s)##\s\[$RELEASE_VERSION.+?(?=##\s\[|$)" ./CHANGELOG.md | tr -d '\0' | sed /^$/d | sed '1d')
          CHANGELOG=$(echo "$CHANGELOG" | sed '$!N;s/^###.*\n#/#/;P;D' | sed '$!N;s/^###.*\n#/#/;P;D' | sed '${/^###/d;}')
          if [ "$CHANGELOG" == "" ]; then
            echo "changelog is empty!"
            exit 1
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Collect sdist and wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse

      - name: Create release draft
        uses: ncipollo/release-action@v1.11.1
        with:
          name: ${{ steps.get_release_info.outputs.version }}
          tag: ${{ steps.get_release_info.outputs.tag }}
          commit: ${{ github.ref }}
          draft: true
          body: ${{ env.CHANGELOG }}
          artifacts: wheelhouse/*
          token: ${{ secrets.GITHUB_TOKEN }}
          artifactErrorsFailBuild: true
