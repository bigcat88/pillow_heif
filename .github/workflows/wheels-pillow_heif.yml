name: Wheels • Pillow-Heif

on:
  workflow_call:

jobs:
  wheels_macos_arm:
    name: macosx • aarch64
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install libheif from formula
        run: |
          brew uninstall --force --ignore-dependencies imagemagick libheif aom
          brew install --formula ./libheif/macos/libheif.rb

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_ARCHS: "arm64"
          CIBW_ENVIRONMENT_MACOS: PH_FULL_ACTION=1
          MACOSX_DEPLOYMENT_TARGET: "14.0"

      - name: Check built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-macos-arm64
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_windows:
    name: windows • x86_64
    runs-on: windows-2019
    env:
      MSYS2_PREFIX: "C:/temp/msys64/mingw64"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: msys2/setup-msys2@v2
        with:
          location: C:/temp
          update: true
          install: >-
            patch
            mingw-w64-x86_64-binutils

      - name: Build libheif and dependencies
        shell: msys2 {0}
        run: |
            cd libheif/windows/mingw-w64-libheif
            makepkg-mingw --syncdeps --noconfirm -f
            pacman -U mingw-w64-x86_64-libheif-*-any.pkg.tar.zst --noconfirm

      - name: Remove DLL trailing data
        run: |
          Get-ChildItem -Path $Env:MSYS2_PREFIX/bin -Force | Format-List
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libheif.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libde265-0.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libx265-215.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libwinpthread-1.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libgcc_s_seh-1.dll
          ${{ env.MSYS2_PREFIX }}/bin/strip -s -v ${{ env.MSYS2_PREFIX }}/bin/libstdc++-6.dll

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_ARCHS: "AMD64"
          CIBW_ENVIRONMENT_WINDOWS: PH_FULL_ACTION=1
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -vv -w {dest_dir} {wheel} --add-path ${{ env.MSYS2_PREFIX }}/bin"

      - name: Check built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-windows-x86_64
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_macos:
    name: macosx • x86_64
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4
      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_ARCHS: "x86_64"
          CIBW_ENVIRONMENT_MACOS: PH_FULL_ACTION=1 TEST_DECODE_THREADS=0
          MACOSX_DEPLOYMENT_TARGET: "13.0"

      - name: Check built wheels
        run: |
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-macos-x86_64
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_cpython_amd64:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux, musllinux ]
    name: ${{ matrix.cibw_buildlinux }} • AMD64 • CPython
    runs-on: ubuntu-24.04
    env:
      BUILD_DIR: "/tmp/ph_build_stuff"

    steps:
      - uses: actions/checkout@v4
      - name: musllinux preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: echo INSTALL_OS_PACKAGES="apk update && apk --no-cache add $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev"

      - name: manylinux preparations
        if: matrix.cibw_buildlinux == 'manylinux'
        run: echo INSTALL_OS_PACKAGES="yum makecache && yum install -y $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "libjpeg-turbo-devel lcms2-devel"

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_BUILD: ${{ format('cp3*-{0}_x86_64', matrix.cibw_buildlinux) }}
          CIBW_ARCHS: "x86_64"
          CIBW_BEFORE_ALL_LINUX: |
            ${{ env.INSTALL_OS_PACKAGES }}
            python3 {package}/libheif/linux_build_libs.py
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR=/host${{ env.BUILD_DIR }} PH_FULL_ACTION=1

      - name: Checking built wheels
        run: |
          python3 -m pip install "twine>=6.1.0" "packaging>=24.2"
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-${{ matrix.cibw_buildlinux }}-cpython-amd64
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_cpython_arm64:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux, musllinux ]
    name: ${{ matrix.cibw_buildlinux }} • ARM64 • CPython
    runs-on: ubuntu-24.04-arm
    env:
      BUILD_DIR: "/tmp/ph_build_stuff"

    steps:
      - uses: actions/checkout@v4
      - name: musllinux preparations
        if: matrix.cibw_buildlinux == 'musllinux'
        run: echo INSTALL_OS_PACKAGES="apk update && apk --no-cache add $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "fribidi-dev harfbuzz-dev jpeg-dev lcms2-dev openjpeg-dev"

      - name: manylinux preparations
        if: matrix.cibw_buildlinux == 'manylinux'
        run: echo INSTALL_OS_PACKAGES="yum makecache && yum install -y $OS_PACKAGES" >> $GITHUB_ENV
        env:
          OS_PACKAGES: "libjpeg-turbo-devel lcms2-devel"

      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_BUILD: ${{ format('cp3*-{0}_aarch64', matrix.cibw_buildlinux) }}
          CIBW_ARCHS: "aarch64"
          CIBW_BEFORE_ALL_LINUX: |
            ${{ env.INSTALL_OS_PACKAGES }}
            python3 {package}/libheif/linux_build_libs.py
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR=/host${{ env.BUILD_DIR }} PH_FULL_ACTION=1

      - name: Checking built wheels
        run: |
          python3 -m pip install "twine>=6.1.0" "packaging>=24.2"
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-${{ matrix.cibw_buildlinux }}-cpython-arm64
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_pypy_amd64:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux ]
    name: ${{ matrix.cibw_buildlinux }} • AMD64 • PyPy
    runs-on: ubuntu-24.04
    env:
      BUILD_DIR: "/tmp/ph_build_stuff"

    steps:
      - uses: actions/checkout@v4
      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_BUILD: ${{ format('pp3*-{0}_x86_64', matrix.cibw_buildlinux) }}
          CIBW_ARCHS: "x86_64"
          CIBW_BEFORE_ALL_LINUX: |
            yum makecache && yum install -y libjpeg-turbo-devel lcms2-devel
            python3 {package}/libheif/linux_build_libs.py
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR=/host${{ env.BUILD_DIR }} PH_FULL_ACTION=1
          CIBW_ENVIRONMENT_PASS_LINUX: PH_TESTS_NO_HEVC_ENC

      - name: Checking built wheels
        run: |
          python3 -m pip install "twine>=6.1.0" "packaging>=24.2"
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-${{ matrix.cibw_buildlinux }}-pypy-amd64
          path: wheelhouse/*.whl
          if-no-files-found: error

  wheels_linux_pypy_arm64:
    strategy:
      fail-fast: true
      matrix:
        cibw_buildlinux: [ manylinux ]
    name: ${{ matrix.cibw_buildlinux }} • ARM64 • PyPy
    runs-on: ubuntu-24.04-arm
    env:
      BUILD_DIR: "/tmp/ph_build_stuff"

    steps:
      - uses: actions/checkout@v4
      - name: Run cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.21.3
          python3 -m cibuildwheel
        env:
          CIBW_BUILD: ${{ format('pp3*-{0}_aarch64', matrix.cibw_buildlinux) }}
          CIBW_ARCHS: "aarch64"
          CIBW_BEFORE_ALL_LINUX: |
            yum makecache && yum install -y libjpeg-turbo-devel lcms2-devel
            python3 {package}/libheif/linux_build_libs.py
          CIBW_ENVIRONMENT_LINUX: BUILD_DIR=/host${{ env.BUILD_DIR }} PH_FULL_ACTION=1

      - name: Checking built wheels
        run: |
          python3 -m pip install "twine>=6.1.0" "packaging>=24.2"
          python3 -m pip install twine
          python3 -m twine check wheelhouse/*

      - name: Uploading wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-${{ matrix.cibw_buildlinux }}-pypy-arm64
          path: wheelhouse/*.whl
          if-no-files-found: error

  sdist:
    name: Source distribution
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4
      - name: Install requirements
        run: python3 -m pip install check-manifest twine wheel

      - name: Run check-manifest
        run: python3 -m check_manifest

      - name: Install libheif from formula
        run: |
          brew uninstall --force --ignore-dependencies imagemagick libheif aom
          brew install --formula ./libheif/macos/libheif.rb

      - name: Build sdist
        run: |
          python3 -m pip install pytest pillow numpy pympler defusedxml
          python3 -m build --sdist --outdir wheelhouse

      - name: Install and check sdist
        run: |
          python3 -m pip install --user wheelhouse/*.tar.gz
          python3 -m twine check wheelhouse/*

      - name: LibHeif info
        run: python3 -c "import pillow_heif; print(pillow_heif.libheif_info())"

      - name: Test sdist
        run: |
          export PH_FULL_ACTION=1 TEST_DECODE_THREADS=0
          python3 -m pytest

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels_pillow_heif-sdist
          path: wheelhouse/*.tar.gz
